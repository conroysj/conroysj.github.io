<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Code Bouquet</title><description>Code Bouquet</description><link>http://localhost:2368/</link><generator>Ghost 0.5</generator><lastBuildDate>Mon, 26 Oct 2015 21:25:49 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Recap: GitHub Universe</title><description>&lt;p&gt;With many thanks to my coding school alma mater, &lt;a href="http://localhost:2368/recap-github-universe/www.makersquare.com"&gt;MakerSquare&lt;/a&gt;, I was very fortunate to win a couple of tickets to the &lt;a href="http://githubuniverse.com/"&gt;GitHub Universe&lt;/a&gt; conference earlier this month. The hours that I spent there were productive and insightful. Here are some of the highlights: &lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/10/caff-hyd.png" alt=""&gt;
GitHub covered all the bases with “caffeinate” and “hydration” stations. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keynote Speaker: Kellan Elliott-McCrea (Former CTO, Etsy)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Kellan delivered a great keynote that centered on fomenting the culture necessary for a successful engineering team. &lt;/p&gt;

&lt;p&gt;Constant learning, he said, must not only be promoted, but also a sustained practice. This involves a certain degree of reflection and focus on environmental variables, like the build process. For instance, it’s important to ask what about a build environment can be changed, and what should be changed? This type of investment in building a more stable and stronger environment, either through coded solutions or through teaching (with tools, documentation, training, etc.) increases a team’s confidence to take risks. He also spoke about how minimizing harbingers to learning is just as—if not more—important as promoting learning. Harbingers include things like lacking the time to devote to learning, path dependency, poor tooling, and lack of confidence, among others.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/10/kellan.png" alt=""&gt;
Kellan Elliott-McCrea on why we cannot afford to stop learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Talks on Continuous Integration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There were several talks given on CI, along with demos of TravisCI. The low down: CI should not be an afterthought, as it could have a negative effect on a team’s moral. Instead, it should be integral, easy to use, and scalable. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/10/ci-in-build.png" alt=""&gt;
CI in build systems is essential to go from yolo-freestyle deploys to concrete, confident deploys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Every Company is Software Company&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It was inspiring to hear from a panel of tech decision makers and influencers at top companies like GE, Ford, and Target, about how they are turning farmers, consumers, you, and me into techies and end-users. Who knew, for instance, that John Deere had over 100 mobile apps in production? They spoke about differences in management style across industries, how to bridge divergent styles, and the importance of building common tools across cultures, languages, and backgrounds for those who may have never used common tools before. Anecdotes were provided from stories of UI/UX and boardroom discussions. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/10/badge-waffle.png" alt=""&gt;
Afternoon waffles sponsored by waffle.io. Really, ALL the bases were belonged to GitHub at this conf.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Changing Lives with Open Data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hidenori Fujimura with the Geospatial Information Authority of Japan talked about how new mapping technologies and robotics were used to assess damages after catastrophes, such as earthquakes and tsunamis. Abhi Nemani, from the Board of OpenGov, spoke to how government resources could be optimized when both data reporting and analysis were more accessible, giving anecdotes and live demos of technologies in production from his time as the Chief Data Officer for the City of Los Angeles. Danny Whelan demoed Remix,a platform used by municipal transportation agencies to plan routes and other logistics. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Desktop Apps with Web Technologies using Electron&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/10/jessica-lord.png" alt=""&gt;
Jessica Lord presented and demoed the Electron framework.&lt;/p&gt;

&lt;p&gt;More and more quality apps are now being built using technologies that were once considered “reserved” for the web, like JavaScript, HTML, and CSS (ex: Spotify). Electron, created by GitHub, leverages these technologies along with Chromium—the Chrome engine—and Node.js. Under the hood, an electron app has two processes: main and render. The main process consists of the app’s lifecycle, from when the app is started until it is ended; modules allow you to interact with the system UI and allow for inner-process communication (ipc).  The renderer is responsible for areas like the DOM, web-frame, ipc with the main ipc, among others. There’s also chrome debugger support!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JIBO&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A JIBO robot, from the company of the same name, was demoed and the audience at this talk was converted to a sea of JIBO-believers. Though not yet widely released, the JIBO has a JavaScript API that is available on npm. Included in the demo were a series of robotic animations that were programmed using their SDK and with Gaia—a game development tool. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Offline Web Apps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Myk Melez with Mozilla covered how service workers support offline-ing by transparently intercepting all network requests that an application might make. A great use case for service workers would be for an app that performs periodic background sync. A couple of caveats to keep in mind when seeking to use this technology include browser support and a requirement that your website use HTTPS. Myk also demoed a tool that can enable offline capability for a GitHub Pages web app: &lt;a href="https://github.com/mozilla/oghliner"&gt;oghliner&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Tricks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check ‘em out: &lt;a href="https://github.com/tiimgreen/github-cheat-sheet"&gt;https://github.com/tiimgreen/github-cheat-sheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/10/david-tan.png" alt=""&gt;
David Tan (MKS15) with a massive GitHub Universe backdrop.&lt;/p&gt;</description><link>http://localhost:2368/recap-github-universe/</link><guid isPermaLink="false">7b124e1a-3ed2-43a8-9a25-2898039d31ee</guid><dc:creator>Sean Conroy</dc:creator><pubDate>Mon, 26 Oct 2015 21:23:42 GMT</pubDate></item><item><title>Deciding on a Database</title><description>&lt;p&gt;On the heels of a great talk by Laurie Voss - the CTO of NPM, my thesis project team at MakerSquare needed a database. Thankfully, the talk, our experience, and studies had informed us well: after some short deliberation, we decided to use PostgreSQL. &lt;/p&gt;

&lt;h6 id="relationaldatabases"&gt;Relational Databases&lt;/h6&gt;

&lt;p&gt;Relational databases like PostgreSQL and MySQL (aka databases which use &lt;a href="http://en.wikipedia.org/wiki/SQL"&gt;structured query language&lt;/a&gt;) use binary code to store information. This allows for speedy lookup times, in addition to efficient queries that can compare different, but relational datasets. There are some limitations: namely, the structure of your dataset is less maleable after it's created. Also, entries are space-limited by a pre-defined integer/character restriction-specification. &lt;/p&gt;

&lt;p&gt;An SQL database made most sense for our project because we wanted to be able to make comparative queries on the fly. One of the features of our project allows users to create groups with other users, and to share particular information with particular groups, somewhat like circles in Google+. Rendering these groups and relevant information involves creating join tables between the users and group tables, as well as between the table containing users' information points and their relevant groups. While possible using another type of database, this would have proved costly in time and space requirements - especially so given large data sets.&lt;/p&gt;

&lt;h6 id="nonrelationaldatabases"&gt;Non-relational Databases&lt;/h6&gt;

&lt;p&gt;Alternative databases we considered included non-relational databases, like Firebase. These allow for the quick storing of data and a quick lookup of information, but only when particular to one data store, like all of the information points on one user. JSON data stores used in these databases store data in no particular order, but the manner by which the data is structured (ie the parameters, the amount of data etc.) may be iterated on as desired. Unlike relational databases, they are not restricted by a pre-defined integer/character specification and count.&lt;/p&gt;

&lt;p&gt;Iterating through each user's JSON store in order to find them party to a particular group, or through a group's JSON store in order to find users, is time consuming. This would have been the case with finding users' information points and their relevant groups in our project. Storing information in key : value pairs is a great, speedy way of storing data, however. It must also be said that setting up a database on Firebase is a breeze. &lt;/p&gt;

&lt;h6 id="morefantasticoptions"&gt;More Fantastic Options&lt;/h6&gt;

&lt;p&gt;We considered other databases, all of which have their own unique set of advantages and disadvantages - each of which worthy of their own blog post.&lt;/p&gt;

&lt;p&gt;A few takeaways from Laurie's talk that helped me consider these databases include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memcache: Good for ephemeral data (though cache can always be pulled out again). &lt;/li&gt;
&lt;li&gt;Redis: Stores to disk constantly vs at every x interval. Great for a persistent, comprehensive back up system.&lt;/li&gt;
&lt;li&gt;MongoDB: Great for prototypes. Like other non-relational databases: sort of schemaless, hard to scale.&lt;/li&gt;
&lt;li&gt;CouchDB: Great for replication..&lt;/li&gt;
&lt;li&gt;LevelDB: Great for storing key : value pairs, easy to install. &lt;/li&gt;
&lt;li&gt;MySQL: Defacto leader of relational databases. &lt;/li&gt;
&lt;li&gt;Oracle: More $, fewer problems. &lt;/li&gt;
&lt;li&gt;Cassandra: Great for: high write and low read, like ad network stats.&lt;/li&gt;
&lt;li&gt;Riak: Cassandra competitor, easily scaled. Can trade off read/write speed, partition tolerance. &lt;/li&gt;
&lt;li&gt;Neo4J: Application specific database, great for graphs. &lt;/li&gt;
&lt;li&gt;The File System: Durable! Good replication, has been super slow, but now we have SSDs. &lt;/li&gt;
&lt;li&gt;HDFS/HBase - hadoop: Big data.. woo!&lt;/li&gt;
&lt;li&gt;S3: Durable, scaleable, and possibly pricey? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wondering why we can't just have it all? &lt;a href="http://en.wikipedia.org/wiki/CAP_theorem"&gt;Start here.&lt;/a&gt; If you think you've got a workaround that might allow you to design the ultimate database that has it all, get in touch! &lt;/p&gt;

&lt;p&gt;Sean&lt;/p&gt;</description><link>http://localhost:2368/so-many-databases-so-hard-to-choose/</link><guid isPermaLink="false">27c05cd5-d909-4f6e-a686-acc86485ffdb</guid><dc:creator>Sean Conroy</dc:creator><pubDate>Tue, 05 May 2015 17:45:51 GMT</pubDate></item><item><title>Angular Binding Issues</title><description>&lt;p&gt;Angular has some issues - though probably not of the fundamental sort. They're not the kind of issues that might convince you to leave it in reckless abandon, though they might eat into your lunch hour (like they did to my own :o ).. unless, that is, you've encountered the following issue and you're reading this blog! &lt;/p&gt;

&lt;p&gt;The other day I was building a view in an application that required a user interface with form validation: I wanted to allow users to submit information, but only particular information (the right information, character limits, etc.) accompanied by an image. Angular makes it super simple to carry out form validation. After reviewing a mighty &lt;a href="https://scotch.io/tutorials/angularjs-form-validation"&gt;tutorial on scotch.io&lt;/a&gt;, I took to my text editor.&lt;/p&gt;

&lt;p&gt;In the form, two-way data binding worked great on all of the text inputs/textarea, but not so well on the file input - where images were to be attached for uploading. A cursory search revealed that others had the &lt;a href="https://github.com/angular/angular.js/issues/1375"&gt;same&lt;/a&gt; issue. I tried a &lt;a href="http://stackoverflow.com/questions/16207202/required-attribute-not-working-with-file-input-in-angular-js"&gt;directive&lt;/a&gt; that would detect when a file was uploaded and therefore validate the form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.directive('validFile', function () {
  return {
    require: 'ngModel',
    link: function (scope, el, attrs, ngModel) {
      ngModel.$render = function () {
        ngModel.$setViewValue(el.val());
      };
      el.bind('change', function () {
        scope.$apply(function () {
          ngModel.$render();
        });
      });
    }
  };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;...but the same directive did not actually succeed in uploading that file: The back-end's attempt to parse the post request's data returned evidence of the void: cannot read ~ of undefined. &lt;/p&gt;

&lt;p&gt;My solution was to patch in a bit of jQuery, which worked swimmingly. In the controller, we created a new FormData object and appended the necessary information to it, substituting a jQuery selector for the item that we couldn't bind via angular:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
fd.append('file', $('.image')[0].files[0], 'image');
fd.append('dish_name', $scope.dishname);
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allowed us to both validate the form using the above directive and ensure that it was being appended to the FormData.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h4&amp;gt;Upload Image:&amp;lt;/h4&amp;gt;
&amp;lt;input type="file" name="image" class="image" ng-model="file" valid-file required accept="image/*"&amp;gt;&amp;lt;/input&amp;gt;
&amp;lt;p&amp;gt;{{ reviewForm.image.$error.required &amp;amp;&amp;amp; ' - please upload an image file - ' || 'Looks good!'}}&amp;lt;/p&amp;gt;

&amp;lt;h4&amp;gt;Dish Name:&amp;lt;/h4&amp;gt;
&amp;lt;textarea class="review-dishname" name="dishname" ng-model="dishname" ng-minlength="2" ng-required="true"&amp;gt;&amp;lt;/textarea&amp;gt;
&amp;lt;p ng-show="reviewForm.dishname.$error.required &amp;amp;&amp;amp; !reviewForm.dishname.$pristine" class="help-block"&amp;gt;Please enter the name of the dish you're reviewing.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Angular leverages jQuery to meet different ends, and I'm not sure why it doesn't do so in this instance. But I'm sure that it will be a likely new feature/patch come Angular 2.0 - due any month now. It makes perfect sense that the ng-model service should work for 'input type=file' and therefore permit two-way data binding, so that users can upload content seamlessly, and, for example, be made aware in real-time that their content has been uploaded. &lt;/p&gt;

&lt;p&gt;Sean&lt;/p&gt;</description><link>http://localhost:2368/angular-sometimes-doesnt-bind-well/</link><guid isPermaLink="false">e60f7b0a-f0f0-4d90-a75b-f7b42875102c</guid><dc:creator>Sean Conroy</dc:creator><pubDate>Sat, 02 May 2015 06:22:56 GMT</pubDate></item><item><title>Welcome to my blog, hosted with Ghost on GitHub Pages!</title><description>&lt;h3 id="helloworld"&gt;Hello, world!&lt;/h3&gt;

&lt;h5 id="cmovalacosita"&gt;¿Cómo va la cosita?&lt;/h5&gt;

&lt;p&gt;You're very welcome to join me as I blog about software and the world around me. I hope you'll find this material interesting, helpful, or perhaps insightful. I will try to the best of my ability to give credit where credit is due. For starters, this site is in part made possible by:&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt; Blogging Platform - a super simple, minimal text editor that can be  hosted on GitHub Pages. I leveraged &lt;a href="https://github.com/axitkhurana/buster"&gt;Buster&lt;/a&gt; to create a static instance of Ghost, which I run locally to edit my page. This &lt;a href="http://stackoverflow.com/questions/23375422/how-to-setup-github-pages-to-redirect-dns-requests-from-subdomain-e-g-www-to"&gt;Stack Overflow post&lt;/a&gt; gave me the resources to iron out my redirecting woes in no time. &lt;/p&gt;

&lt;p&gt;If you have or develop questions while reading my posts, simply reach out to me - I really do appreciate every bit of feedback. &lt;/p&gt;

&lt;p&gt;Sean&lt;/p&gt;</description><link>http://localhost:2368/welcome-to-ghost/</link><guid isPermaLink="false">60811cb7-baeb-4312-9fbc-8aa8d6932de3</guid><dc:creator>Sean Conroy</dc:creator><pubDate>Tue, 24 Mar 2015 03:35:48 GMT</pubDate></item></channel></rss>